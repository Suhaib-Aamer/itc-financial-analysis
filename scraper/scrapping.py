# -*- coding: utf-8 -*-
"""Scrapping.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1ONCmRaWoMJjX5T6z5RkGoh9mbizoCuhj
"""

pip install tavily-python

from google.colab import userdata
key = userdata.get('tavily_ai')

from tavily import TavilyClient
from langchain.schema import Document

client = TavilyClient(key)

pdf_sources = [
    # Annual Reports of 2023-2024
    {
        "url": "https://www.itcportal.com/about-itc/shareholder-value/annual-reports/itc-annual-report-2023/pdf/ITC-Report-and-Accounts-2023.pdf",
        "metadata": {"source": "ITC Report and Accounts 2023"}
    },
    {
        "url": "https://www.itcportal.com/about-itc/shareholder-value/annual-reports/itc-annual-report-2024/pdf/ITC-Report-and-Accounts-2024.pdf",
        "metadata": {"source": "ITC Report and Accounts 2024"}
    },
    # Presentation 2023
    {
        "url": "https://www.itcportal.com/investor/pdf/ITC-Quarterly-Result-Presentation-Q1-FY2023.pdf",
        "metadata": {"source": "Quarterly Financial Statement Q1 FY2023"}
    },
    {
        "url": "https://www.itcportal.com/investor/pdf/ITC-Quarterly-Result-Presentation-Q2-FY2023.pdf",
        "metadata": {"source": "Quarterly Financial Statement Q2 FY2023"}
    },
    # {
    #     "url": "https://www.itcportal.com/investor/pdf/ITC-Quarterly-Result-Presentation-Q3-FY2023.pdf",
    #     "metadata": {"source": "Quarterly Financial Statement Q3 FY2023"}
    # },
    {
        "url": "https://www.itcportal.com/investor/pdf/ITC-Quarterly-Result-Presentation-Q4-FY2023.pdf",
        "metadata": {"source": "Quarterly Financial Statement Q4 FY2023"}
    },
    # Presentation 2024
    {
        "url": "https://www.itcportal.com/investor/pdf/ITC-Quarterly-Result-Presentation-Q1-FY2024.pdf",
        "metadata": {"source": "Quarterly Result Presentation Q1 FY2024"}
    },
    {
        "url": "https://www.itcportal.com/investor/pdf/ITC-Quarterly-Result-Presentation-Q2-FY2024.pdf",
        "metadata": {"source": "Quarterly Result Presentation Q2 FY2024"}
    },
    {
        "url": "https://www.itcportal.com/investor/pdf/ITC-Quarterly-Result-Presentation-Q3-FY2024.pdf",
        "metadata": {"source": "Quarterly Result Presentation Q3 FY2024"}
    },
    {
        "url": "https://www.itcportal.com/investor/pdf/ITC-Quarterly-Result-Presentation-Q4-FY2024.pdf",
        "metadata": {"source": "Quarterly Result Presentation Q4 FY2024"}
    },
    # Presentation 2025
    {
        "url": "https://www.itcportal.com/investor/pdf/ITC-Quarterly-Result-Presentation-Q1-FY2025.pdf",
        "metadata": {"source": "Quarterly Result Presentation Q1 FY2025"}
    },
    {
        "url": "https://www.itcportal.com/investor/pdf/ITC-Quarterly-Result-Presentation-Q2-FY2025.pdf",
        "metadata": {"source": "Quarterly Result Presentation Q2 FY2025"}
    },
    {
        "url": "https://www.itcportal.com/investor/pdf/ITC-Quarterly-Result-Presentation-Q3-FY2025.pdf",
        "metadata": {"source": "Quarterly Result Presentation Q3 FY2025"}
    },
    # Standalone Financial Report 2023
    # {
    #     "url": "https://www.itcportal.com/investor/pdf/ITC-Financial-Result-Q1-FY2023-sfs.pdf",
    #     "metadata": {"source": "Standalone Financial Result Q1 FY2023"}

    # },
    {
        "url": "https://www.itcportal.com/investor/pdf/ITC-Financial-Result-Q2-FY2023-sfs.pdf",
        "metadata": {"source": "Standalone Financial Result Q2 FY2023"}
    },
    {
        "url": "https://www.itcportal.com/investor/pdf/ITC-Financial-Result-Q3-FY2023-sfs.pdf",
        "metadata": {"source": "Standalone Financial Result Q3 FY2023"}
    },
    {
        "url": "https://www.itcportal.com/investor/pdf/ITC-Financial-Result-Q4-FY2023-sfs.pdf",
        "metadata": {"source": "Standalone Financial Result Q4 FY2023"}
    },
    # Standalone Financial Report 2024
    {
        "url": "https://www.itcportal.com/investor/pdf/ITC-Financial-Result-Q1-FY2024-sfs.pdf",
        "metadata": {"source": "Standalone Financial Result Q1 FY2024"}
    },
    {
        "url": "https://www.itcportal.com/investor/pdf/ITC-Financial-Result-Q2-FY2024-sfs.pdf",
        "metadata": {"source": "Standalone Financial Result Q2 FY2024"}
    },
    {
        "url": "https://www.itcportal.com/investor/pdf/ITC-Financial-Result-Q3-FY2024-sfs.pdf",
        "metadata": {"source": "Standalone Financial Result Q3 FY2024"}
    },
    {
        "url": "https://www.itcportal.com/investor/pdf/ITC-Financial-Result-Q4-FY2024-sfs.pdf",
        "metadata": {"source": "Standalone Financial Result Q4 FY2024"}
    },
    # Standalone Financial Report 2025
    {
        "url": "https://www.itcportal.com/investor/pdf/ITC-Financial-Result-Q1-FY2025-sfs.pdf",
        "metadata": {"source": "Standalone Financial Result Q1 FY2025"}
    },
    {
        "url": "https://www.itcportal.com/investor/pdf/ITC-Financial-Result-Q2-FY2025-sfs.pdf",
        "metadata": {"source": "Standalone Financial Result Q2 FY2025"}
    },
    {
        "url": "https://www.itcportal.com/investor/pdf/ITC-Financial-Result-Q3-FY2025-sfs.pdf",
        "metadata": {"source": "Standalone Financial Result Q3 FY2025"}
    },
    # Consolidated Financial Report 2023
    # {
    #     "url": "https://www.itcportal.com/investor/pdf/ITC-Financial-Result-Q1-FY2023-cfs.pdf",
    #     "metadata": {"source": "Consolidated Financial Result Q1 FY2023"}
    # },
    {
        "url": "https://www.itcportal.com/investor/pdf/ITC-Financial-Result-Q2-FY2023-cfs.pdf",
        "metadata": {"source": "Consolidated Financial Result Q2 FY2023"}
    },
    {
        "url": "https://www.itcportal.com/investor/pdf/ITC-Financial-Result-Q3-FY2023-cfs.pdf",
        "metadata": {"source": "Consolidated Financial Result Q3 FY2023"}
    },
    {
        "url": "https://www.itcportal.com/investor/pdf/ITC-Financial-Result-Q4-FY2023-cfs.pdf",
        "metadata": {"source": "Consolidated Financial Result Q4 FY2023"}
    },
    # Consolidated Financial Report 2024
    {
        "url": "https://www.itcportal.com/investor/pdf/ITC-Financial-Result-Q1-FY2024-cfs.pdf",
        "metadata": {"source": "Consolidated Financial Result Q1 FY2024"}
    },
    {
        "url": "https://www.itcportal.com/investor/pdf/ITC-Financial-Result-Q2-FY2024-cfs.pdf",
        "metadata": {"source": "Consolidated Financial Result Q2 FY2024"}
    },
    {
        "url": "https://www.itcportal.com/investor/pdf/ITC-Financial-Result-Q3-FY2024-cfs.pdf",
        "metadata": {"source": "Consolidated Financial Result Q3 FY2024"}
    },
    {
        "url": "https://www.itcportal.com/investor/pdf/ITC-Financial-Result-Q4-FY2024-cfs.pdf",
        "metadata": {"source": "Consolidated Financial Result Q4 FY2024"}
    },
    # Consolidated Financial Report 2025
    {
        "url": "https://www.itcportal.com/investor/pdf/ITC-Financial-Result-Q1-FY2025-cfs.pdf",
        "metadata": {"source": "Consolidated Financial Result Q1 FY2025"}
    },
    {
        "url": "https://www.itcportal.com/investor/pdf/ITC-Financial-Result-Q2-FY2025-cfs.pdf",
        "metadata": {"source": "Consolidated Financial Result Q2 FY2025"}
    },
    {
        "url": "https://www.itcportal.com/investor/pdf/ITC-Financial-Result-Q3-FY2025-cfs.pdf",
        "metadata": {"source": "Consolidated Financial Result Q3 FY2025"}
    }
]

len(pdf_sources)

# Looping through all PDFs, extract content, and create Document objects

failed_pdfs = []
documents = []
for pdf in pdf_sources:
    response = client.extract(urls=[pdf["url"]], extract_depth="advanced")

    if response.get("results") and len(response["results"]) > 0:
        content = response["results"][0].get("raw_content", "")
        documents.append(Document(page_content=content, metadata=pdf["metadata"]))
    else:
        failed_pdfs.append(pdf["url"])
        print(f"Failed to extract: {pdf['url']}")

print(f"\nTotal PDFs processed: {len(documents)}")
print(f"Failed PDFs: {len(failed_pdfs)}")

"""documents[4].page_content"""

len(documents)

import re

def cleaning(text):

    # Lower
    text = text.lower()

    # Remove HTML tags
    text = re.sub(r'<[^>]+>', ' ', text)

    # Remove URLs (http, https, www)
    text = re.sub(r'http\S+|www\.\S+', ' ', text)

    # Remove Markdown links: [text](link)
    text = re.sub(r'\[([^\]]+)\]\([^\)]+\)', r'\1', text)

    # Remove HTML links: <a href="...">text</a> (already removed by HTML tag regex, but just in case)
    text = re.sub(r'<a\s+(?:[^>]*?\s+)?href="[^"]*">(.*?)</a>', r'\1', text)

    return text

for doc in documents:
   doc.page_content = cleaning(doc.page_content)

documents[0].page_content

type(documents)

import pickle

with open("documents_32.pkl", "wb") as f:
    pickle.dump(documents, f)





























































































































































































import re
import pandas as pd

def eda(data, columns):
    for column in columns:
        print(f"\n--- EDA for Column: {column} ---")
        col_data = data[column].astype(str)

        lower = " ".join(col_data).islower()
        http = col_data.apply(lambda x: bool(re.search(r"<.*?>", x))).sum()
        url = col_data.apply(lambda x: bool(re.search(r"http[s]?://.+\S+", x))).sum()
        mentions = col_data.apply(lambda x: bool(re.search(r"[@#].+?\S+", x))).sum()
        # emojis_count = col_data.apply(lambda x: emoji.emoji_count(x) > 0).sum()
        unn_char = col_data.apply(lambda x: bool(re.search(r"[0-9]", x))).sum()
        special_char = col_data.apply(lambda x: bool(re.search(r"[-.:,\]", x))).sum()
        single_quotes = col_data.apply(lambda x: bool(re.search(r"'(.*?)'", x))).sum()

        if not lower:
            print(" - Mixed casing detected.")
        if http > 0:
            print(f" - {http} texts contain HTML tags.")
        if url > 0:
            print(f" - {url} texts contain URLs.")

        # if mentions > 0:
        #     print(f" - {mentions} texts contain mentions (@ or #).")
        # if emojis_count > 0:
        #     print(f" - {emojis_count} texts contain emojis.")
        # if unn_char > 0:
        #     print(f" - {unn_char} texts contain numbers.")
        # if special_char > 0:
        #     print(f" - {special_char} texts contain special characters (-, ., :, \, ,).")
        # if single_quotes > 0:
        #     print(f" - {single_quotes} texts contain words inside single quotes ('...').")

